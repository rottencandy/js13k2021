attribute vec4 aPos;
attribute vec4 aNorm;

precision mediump float;

uniform mat4 uMat;
uniform mat4 uModel;
uniform vec3 uGridPos;
uniform vec4 uColor;
uniform vec3 uLightPos;

varying vec3 vNormal;

export void vertex() {
  // TODO: Is passing the grid x,y the best method?
  gl_Position = uMat * vec4(aPos.xyz + uGridPos * 50.0, 1.0);
  vNormal = mat3(uModel) * aNorm.xyz;
}

export void colorFragment() {
  // ambient light intensity
  vec3 ambient = vec3(0.3);

  // calculate directional lighting using normals
  vec3 normal = vec3(normalize(vNormal));
  vec3 lightPos = normalize(uLightPos);
  float light = max(dot(normal, lightPos), 0.0);

  vec4 result = vec4((light + ambient) * uColor.xyz, uColor.w);
  gl_FragColor = result;
}
