attribute vec4 aPos;
attribute vec4 aNorm;

precision mediump float;

uniform mat4 uMat;
uniform mat4 uModel;
uniform vec3 uGridPos;
uniform vec4 uColor;
uniform vec3 uLightPos;
uniform int uFaceType;
uniform float uTime;

varying vec3 vNormal;
varying vec3 vFragPos;

export void vertex() {
  gl_Position = uMat * vec4(aPos.xyz + uGridPos * 50.0, 1.0);
  vNormal = mat3(uModel) * aNorm.xyz;
  // range 0 -> 50 to -1 -> 1
  vFragPos = (aPos.xyz / 50.0) * 2.0 - 1.0;
}

vec3 diffuseLight(vec3 vnormal) {
  // ambient light intensity
  vec3 ambient = vec3(0.3);

  // calculate directional lighting using normals
  vec3 normal = vec3(normalize(vnormal));
  vec3 lightPos = normalize(uLightPos);
  float light = max(dot(normal, lightPos), 0.0);
  return light + ambient;
}

float edgeHighlight(vec2 fragPos) {
  // calculate edge highlight
  // range -1 -> 1 to 0 -> 1 -> 0
  vec2 absFrag = 1.0 - abs(fragPos);
  float fragEdge = step(0.03, min(absFrag.x, absFrag.y));
  fragEdge = clamp(fragEdge, 0.4, 1.0);
  return fragEdge;
}

export void sideFragment() {
  float fragEdge = edgeHighlight(vFragPos.xy);
  vec3 light = diffuseLight(vNormal);

  vec4 result = vec4(light * fragEdge * uColor.xyz, uColor.w);
  gl_FragColor = result;
}

float boxSDF(vec2 p, vec2 b) {
  vec2 d = abs(p) - b;
  return length(max(d, 0.)) + min(max(d.x, d.y), 0.);
}

export void faceFragment() {
  float fragEdge = edgeHighlight(vFragPos.xz);
  // used for dynamic faces
  vec3 altColor = vec3(1., 1., 1.);

  // static face
  if (uFaceType == 0) {
    gl_FragColor = vec4(fragEdge * uColor.xyz, uColor.w);

    // circle sdf
  } else if(uFaceType == 1) {
    float circleSDF = length(abs(vFragPos.xz));
    float multiCircle = fract(circleSDF * 2. - uTime * 0.01);
    vec3 color2 = altColor - circleSDF / 4.;
    vec3 result = mix(uColor.xyz, color2, multiCircle);
    gl_FragColor = vec4(result * fragEdge, uColor.w);

    // square sdf
  } else {
    float box = boxSDF(vFragPos.xz, vec2(.5, .5));
    float multiBox = fract(box * 3. - uTime * 0.01);
    vec3 color2 = altColor - box / 3.;
    vec3 result = mix(uColor.xyz, color2, multiBox);
    gl_FragColor = vec4(result * fragEdge, uColor.w);
  }
}

// vim: fdm=marker:et:sw=2:
