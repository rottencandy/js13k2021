attribute vec4 aPos;
attribute vec4 aNorm;

precision mediump float;

uniform mat4 uMat;
uniform mat4 uModel;
uniform vec3 uLightPos;
uniform vec3 uColor;
uniform float uTime;
uniform int uFaceType;

varying vec3 vNormal;
varying vec3 vFragPos;

const vec3 OBJ_COLOR = vec3(1.0, 0.0, 0.0);
// ambient light intensity
const vec3 AMBIENT = vec3(0.3);

export void vertex() {
  gl_Position = uMat * aPos;
  vNormal = mat3(uModel) * aNorm.xyz;
  // range 0 -> 50 to -1 -> 1
  vFragPos = (aPos.xyz / 50.0) * 2.0 - 1.0;
}

vec3 diffuseLight(vec3 vnormal) {
  // ambient light intensity
  vec3 ambient = vec3(0.3);

  // calculate directional lighting using normals
  vec3 normal = vec3(normalize(vnormal));
  vec3 lightPos = normalize(uLightPos);
  float light = max(dot(normal, lightPos), 0.0);
  return light + ambient;
}

export void cubeFragment() {
  vec3 light = diffuseLight(vNormal);

  vec3 result = light * OBJ_COLOR;
  gl_FragColor = vec4(result, 1.0);
}

float boxSDF(vec2 p, vec2 b) {
  vec2 d = abs(p) - b;
  return length(max(d, 0.)) + min(max(d.x, d.y), 0.);
}

export void faceFragment() {
  vec3 light = diffuseLight(vNormal);

  if (uFaceType == 0) {
    vec3 result = light * uColor;
    gl_FragColor = vec4(result, 1.0);

  } else {
    float box = boxSDF(vFragPos.xz, vec2(.3, .3));
    float multiBox = fract(box * 2. + uTime * 0.01);
    vec3 color2 = OBJ_COLOR - box / 4.;
    vec3 result = mix(uColor.xyz, color2, multiBox);
    gl_FragColor = vec4(result, 1.);
  }
}

// vim: fdm=marker:et:sw=2:
