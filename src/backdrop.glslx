attribute vec4 aPos;

precision mediump float;

uniform mat4 uMat;
uniform vec3 uLightPos;
uniform vec3 uColor;
uniform float uTime;
uniform float uAspect;

varying vec2 vFragPos;
varying vec2 vScale;

float hash21(vec2 p) {
  return fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453);
}

export void vertex() {
  vScale = vec2(1., uAspect);
  gl_Position = uMat * aPos;
  vFragPos = ((aPos.xz / 50.) * vScale);
}

export void colorFragment() {
  vec2 uv = vFragPos, gv = fract(uv * 12.);
  //float shadow = distance(uv, vec2(.55, .35)) / .1;
  float circle = step(distance(gv, vec2(.5)), .6);

  vec3 col = uColor * circle + uv.x * .4;

  //if (gv.x > .49 || gv.y > .49) col.r = .5;
  gl_FragColor = vec4(col, 1.);
}

// vim: fdm=marker:et:sw=2:
